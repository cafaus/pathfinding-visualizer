{"version":3,"sources":["components/Node.js","algorithms/dijkstra.js","algorithms/AStar.js","variables/variable.js","components/PathFindingVisualizer.js","components/NavBar.js","components/Information.js","App.js","serviceWorker.js","index.js"],"names":["Node","React","forwardRef","props","ref","row","col","isStart","isFinish","isWall","onMouseDown","onMouseEnter","onMouseUp","setPointStatus","backgroundColor","className","dijkstra","grid","startNode","finishNode","visitedNodeInOrder","distance","unvisitedNodes","newGrid","node","push","getConvertedOneDimensionArr","length","sort","a","b","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","unvisitedNeighbors","filter","unvisitedNeighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPath","currentNode","unshift","AStar","endNode","openSet","closedSet","assignNeighborsToGrid","closestNodeIndex","i","f","current","removeElementFromArr","neighbors","neighbor","isRowAndColIncludeInArray","tempG","g","heuristic","newPath","h","console","log","j","addNeighbors","GRID_ROW_LENGTH","GRID_COL_LENGTH","arr","element","index","indexOf","splice","Math","abs","PathFindingVisualizer","handleMouseDown","isSetStartPoint","getNewGridWithStartPoint","setGrid","setIsSetStartToFalse","isSetFinishPoint","getNewGridWithFinishPoint","setIsSetFinishToFalse","getNewGridWithToggleWall","setState","mouseIsPressed","handleMouseEnter","state","handleMouseUp","startPointYCoordinate","startPointXCoordinate","slice","newNode","finishPointYCoordinate","finishPointXCoordinate","cancelAnimation","resetGridExceptStartPointFinishPointAndWall","resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall","visualizeDjikstra","setisVisualizerFinished","pathfindingAlgorithm","isVisualizerFinished","alert","visitedNodesInOrder","nodesInShortestPathOrder","animateDjikstra","handleClearBoard","getInitializeGrid","resetAllNodeClassNameIntoDefault","handleClearWall","resetGridExceptStartPointAndFinishPoint","resetAllNodeClassNameIntoDefaultExceptStartPointFinishPoint","gridRef","this","toggleIsInformationIsOpen","isInformationOpen","map","rowIdx","key","nodeIdx","onClick","Component","NavBar","setSimulationSpeedValue","setIsSetFinishToTrue","setIsSetStartToTrue","simulationSpeedValue","setPathfindingAlgorithm","resetGridToInitExceptStartFinishPointAndWall","value","onChange","e","target","Information","App","useState","setIsSetStartPoint","setIsSetFinishPoint","animationTimeOutArr","setAnimationTimeOutArr","setIsInformationOpen","currRow","createRef","getReferenceToAllNode","useEffect","createNode","animateShortestPath","nodesInShortesPathOrder","promise","timeOut","arrTimeOut","Promise","resolve","setTimeout","animation","clearTimeout","resetAnimationTimeOutArr","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.730dd753.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Node = React.forwardRef((props, ref) => {\r\n  const {\r\n    row,\r\n    col,\r\n    isStart,\r\n    isFinish,\r\n    isWall,\r\n    onMouseDown,\r\n    onMouseEnter,\r\n    onMouseUp,\r\n    setPointStatus,\r\n  } = props;\r\n  const backgroundColor = isStart\r\n    ? \"start-node\"\r\n    : isFinish\r\n    ? \"finish-node\"\r\n    : isWall\r\n    ? \"wall-node\"\r\n    : \"\";\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={`node-btn  ${backgroundColor} ${setPointStatus}`}\r\n      onMouseDown={() => onMouseDown(row, col)}\r\n      onMouseEnter={() => onMouseEnter(row, col)}\r\n      onMouseUp={() => onMouseUp()}\r\n    ></div>\r\n  );\r\n});\r\n\r\nexport default Node;\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodeInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getConvertedOneDimensionArr(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodeInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodeInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodeInOrder;\r\n    updateUnvisitedNeighbors(grid, closestNode);\r\n  }\r\n}\r\n\r\nfunction getConvertedOneDimensionArr(grid) {\r\n  const newGrid = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      newGrid.push(node);\r\n    }\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nfunction sortNodesByDistance(arr) {\r\n  arr.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(grid, node) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(grid, node);\r\n  for (const unvisitedNeighbor of unvisitedNeighbors) {\r\n    unvisitedNeighbor.distance = node.distance + 1;\r\n    unvisitedNeighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(grid, node) {\r\n  const unvisitedNeighbors = [];\r\n  const { row, col } = node;\r\n\r\n  if (col > 0) unvisitedNeighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) unvisitedNeighbors.push(grid[row][col + 1]);\r\n  if (row > 0) unvisitedNeighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) unvisitedNeighbors.push(grid[row + 1][col]);\r\n  return unvisitedNeighbors.filter((unvisitedNeighbor) => {\r\n    return !unvisitedNeighbor.isVisited;\r\n  });\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPath = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPath;\r\n}\r\n","import { GRID_COL_LENGTH, GRID_ROW_LENGTH } from \"../variables/variable\";\r\n\r\nexport default function AStar(grid, startNode, endNode) {\r\n  let openSet = [];\r\n  let closedSet = [];\r\n\r\n  assignNeighborsToGrid(grid);\r\n  startNode = grid[startNode.row][startNode.col];\r\n  endNode = grid[endNode.row][endNode.col];\r\n\r\n  openSet.push(startNode);\r\n\r\n  while (openSet.length > 0) {\r\n    let closestNodeIndex = 0;\r\n    for (let i = 0; i < openSet.length; i++) {\r\n      if (openSet[i].f < openSet[closestNodeIndex].f) closestNodeIndex = i;\r\n    }\r\n    let current = openSet[closestNodeIndex];\r\n\r\n    if (current.row === endNode.row && current.col === endNode.col) {\r\n      return closedSet;\r\n    }\r\n\r\n    removeElementFromArr(openSet, current);\r\n    closedSet.push(current);\r\n\r\n    let neighbors = current.neighbors;\r\n\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      let neighbor = neighbors[i];\r\n\r\n      if (\r\n        !isRowAndColIncludeInArray(closedSet, neighbor.row, neighbor.col) &&\r\n        !neighbor.isWall\r\n      ) {\r\n        let tempG = current.g + heuristic(current, neighbor);\r\n\r\n        let newPath = false;\r\n        if (isRowAndColIncludeInArray(openSet, neighbor.row, neighbor.col)) {\r\n          if (tempG < neighbor.g) {\r\n            neighbor.g = tempG;\r\n            newPath = true;\r\n          }\r\n        } else {\r\n          neighbor.g = tempG;\r\n          newPath = true;\r\n          openSet.push(neighbor);\r\n        }\r\n\r\n        if (newPath) {\r\n          neighbor.h = heuristic(neighbor, endNode);\r\n          console.log(neighbor.h);\r\n          neighbor.f = neighbor.h + neighbor.g;\r\n          neighbor.previousNode = current;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return closedSet;\r\n}\r\n\r\nconst assignNeighborsToGrid = (grid) => {\r\n  for (let i = 0; i < GRID_ROW_LENGTH; i++) {\r\n    for (let j = 0; j < GRID_COL_LENGTH; j++) {\r\n      grid[i][j].neighbors = addNeighbors(grid, i, j);\r\n    }\r\n  }\r\n};\r\n\r\nconst addNeighbors = (grid, row, col) => {\r\n  let neighbors = [];\r\n  if (grid.length === 0) return [];\r\n  if (row < GRID_ROW_LENGTH - 1) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (row > 0) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (col < GRID_COL_LENGTH - 1) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n  if (col > 0) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  return neighbors;\r\n};\r\n\r\nfunction removeElementFromArr(arr, element) {\r\n  const index = arr.indexOf(element);\r\n  arr.splice(index, 1);\r\n}\r\n\r\nfunction heuristic(a, b) {\r\n  return Math.abs(a.row - b.row) + Math.abs(a.col - b.col);\r\n}\r\n\r\nfunction isRowAndColIncludeInArray(arr, row, col) {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i].row === row && arr[i].col === col) return true;\r\n  }\r\n  return false;\r\n}\r\n","export const GRID_ROW_LENGTH = 19;\r\nexport const GRID_COL_LENGTH = 50;\r\nexport const ASTAR = \"astar\";\r\nexport const DIJKSTRA = \"dijkstra\";\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\nimport AStar from \"../algorithms/AStar\";\r\nimport { ASTAR } from \"../variables/variable\";\r\n\r\nclass PathFindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mouseIsPressed: false,\r\n\r\n      startPointYCoordinate: null,\r\n      startPointXCoordinate: null,\r\n      finishPointYCoordinate: null,\r\n      finishPointXCoordinate: null,\r\n    };\r\n    this.gridRef = this.props.gridRef;\r\n  }\r\n\r\n  handleMouseDown = (row, col) => {\r\n    let newGrid;\r\n\r\n    if (this.props.isSetStartPoint) {\r\n      newGrid = this.getNewGridWithStartPoint(row, col);\r\n      this.props.setGrid(newGrid);\r\n      this.props.setIsSetStartToFalse();\r\n      return;\r\n    }\r\n\r\n    if (this.props.isSetFinishPoint) {\r\n      newGrid = this.getNewGridWithFinishPoint(row, col);\r\n      this.props.setGrid(newGrid);\r\n      this.props.setIsSetFinishToFalse();\r\n      return;\r\n    }\r\n\r\n    if (this.props.grid[row][col].isStart || this.props.grid[row][col].isFinish)\r\n      return;\r\n    newGrid = this.getNewGridWithToggleWall(this.props.grid, row, col);\r\n    this.props.setGrid(newGrid);\r\n    this.setState({\r\n      mouseIsPressed: true,\r\n    });\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    if (!this.state.mouseIsPressed || this.props.isSetStartPoint) return;\r\n\r\n    const newGrid = this.getNewGridWithToggleWall(this.props.grid, row, col);\r\n    this.props.setGrid(newGrid);\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    if (this.props.isSetStartPoint) return;\r\n    this.setState({ mouseIsPressed: false });\r\n  };\r\n\r\n  getNewGridWithStartPoint = (row, col) => {\r\n    const { startPointYCoordinate, startPointXCoordinate } = this.state;\r\n    const { grid } = this.props;\r\n    let newGrid = grid.slice();\r\n    let node;\r\n\r\n    if (startPointYCoordinate !== null && startPointXCoordinate !== null) {\r\n      node = newGrid[startPointYCoordinate][startPointXCoordinate];\r\n      newGrid[startPointYCoordinate][startPointXCoordinate] = {\r\n        ...node,\r\n        isStart: false,\r\n        isFinish: false,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n      };\r\n    }\r\n\r\n    node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n      ...node,\r\n      isStart: true,\r\n      isFinish: false,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isWall: false,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n\r\n    this.setState({\r\n      startPointYCoordinate: row,\r\n      startPointXCoordinate: col,\r\n    });\r\n    return newGrid;\r\n  };\r\n\r\n  getNewGridWithFinishPoint = (row, col) => {\r\n    const { finishPointYCoordinate, finishPointXCoordinate } = this.state;\r\n    const { grid } = this.props;\r\n    let newGrid = grid.slice();\r\n    let node;\r\n\r\n    if (newGrid[row][col].isWall) {\r\n      newGrid[row][col].isWall = false;\r\n    }\r\n\r\n    if (finishPointYCoordinate !== null && finishPointXCoordinate !== null) {\r\n      node = newGrid[finishPointYCoordinate][finishPointXCoordinate];\r\n      newGrid[finishPointYCoordinate][finishPointXCoordinate] = {\r\n        ...node,\r\n        isStart: false,\r\n        isFinish: false,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n      };\r\n    }\r\n\r\n    node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n      ...node,\r\n      isStart: false,\r\n      isFinish: true,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n\r\n    this.setState({\r\n      finishPointYCoordinate: row,\r\n      finishPointXCoordinate: col,\r\n    });\r\n    return newGrid;\r\n  };\r\n\r\n  getNewGridWithToggleWall = (grid, row, col) => {\r\n    const {\r\n      cancelAnimation,\r\n      resetGridExceptStartPointFinishPointAndWall,\r\n      resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall,\r\n    } = this.props;\r\n    let newGrid = grid.slice();\r\n    let node = newGrid[row][col];\r\n    cancelAnimation();\r\n    resetGridExceptStartPointFinishPointAndWall();\r\n    resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall();\r\n\r\n    const newNode = {\r\n      ...node,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      previousNode: null,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\n  visualizeDjikstra = async () => {\r\n    const {\r\n      startPointYCoordinate,\r\n      startPointXCoordinate,\r\n      finishPointXCoordinate,\r\n      finishPointYCoordinate,\r\n    } = this.state;\r\n\r\n    const {\r\n      setisVisualizerFinished,\r\n      resetGridExceptStartPointFinishPointAndWall,\r\n      resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall,\r\n      setIsSetStartToFalse,\r\n      setIsSetFinishToFalse,\r\n      cancelAnimation,\r\n      pathfindingAlgorithm,\r\n      isVisualizerFinished,\r\n    } = this.props;\r\n\r\n    cancelAnimation();\r\n    resetGridExceptStartPointFinishPointAndWall();\r\n    resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall();\r\n    setIsSetStartToFalse();\r\n    setIsSetFinishToFalse();\r\n    if (!isVisualizerFinished) {\r\n      setisVisualizerFinished(true);\r\n      return;\r\n    }\r\n\r\n    if (startPointXCoordinate === null || startPointYCoordinate === null) {\r\n      alert(\"please set the start point\");\r\n      return;\r\n    }\r\n\r\n    if (finishPointXCoordinate === null || finishPointYCoordinate === null) {\r\n      alert(\"please set the finish point\");\r\n      return;\r\n    }\r\n    setisVisualizerFinished(false);\r\n    const { grid } = this.props;\r\n    const startNode = grid[startPointYCoordinate][startPointXCoordinate];\r\n    const finishNode = grid[finishPointYCoordinate][finishPointXCoordinate];\r\n\r\n    const visitedNodesInOrder =\r\n      pathfindingAlgorithm === ASTAR\r\n        ? AStar(grid, startNode, finishNode)\r\n        : dijkstra(grid, startNode, finishNode);\r\n\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    console.log(nodesInShortestPathOrder);\r\n\r\n    const x = await this.props.animateDjikstra(\r\n      visitedNodesInOrder,\r\n      nodesInShortestPathOrder\r\n    );\r\n    if (finishNode.previousNode === null) {\r\n      alert(\"there is no path to the finish point\");\r\n      setisVisualizerFinished(true);\r\n      return;\r\n    }\r\n    setisVisualizerFinished(true);\r\n  };\r\n\r\n  handleClearBoard = () => {\r\n    const {\r\n      getInitializeGrid,\r\n      cancelAnimation,\r\n      resetAllNodeClassNameIntoDefault,\r\n    } = this.props;\r\n    cancelAnimation();\r\n    const grid = getInitializeGrid();\r\n    resetAllNodeClassNameIntoDefault();\r\n    this.props.setGrid(grid);\r\n    this.setState({\r\n      startPointXCoordinate: null,\r\n      startPointYCoordinate: null,\r\n      finishPointXCoordinate: null,\r\n      finishPointYCoordinate: null,\r\n    });\r\n    return;\r\n  };\r\n\r\n  handleClearWall = () => {\r\n    const {\r\n      resetGridExceptStartPointAndFinishPoint,\r\n      cancelAnimation,\r\n      resetAllNodeClassNameIntoDefaultExceptStartPointFinishPoint,\r\n    } = this.props;\r\n    cancelAnimation();\r\n    resetAllNodeClassNameIntoDefaultExceptStartPointFinishPoint();\r\n    resetGridExceptStartPointAndFinishPoint();\r\n    return;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      grid,\r\n      isVisualizerFinished,\r\n      toggleIsInformationIsOpen,\r\n      isInformationOpen,\r\n      isSetStartPoint,\r\n      isSetFinishPoint,\r\n    } = this.props;\r\n    const setPointStatus = isSetStartPoint\r\n      ? \"is-set-start-node\"\r\n      : isSetFinishPoint\r\n      ? \"is-set-finish-node\"\r\n      : \"\";\r\n    return (\r\n      <>\r\n        <div className=\"grids\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { col, row, isStart, isFinish, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      ref={this.gridRef[rowIdx][nodeIdx]}\r\n                      key={nodeIdx}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      onMouseDown={() => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={() => this.handleMouseEnter(row, col)}\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      setPointStatus={setPointStatus}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"footer\">\r\n          <div\r\n            className=\"btn negative-neon-btn\"\r\n            onClick={() => this.handleClearBoard()}\r\n          >\r\n            Clear Board\r\n          </div>\r\n          <div\r\n            className={\r\n              isVisualizerFinished\r\n                ? \"btn positive-neon-btn\"\r\n                : \"btn stop-positive-btn\"\r\n            }\r\n            onClick={() => this.visualizeDjikstra()}\r\n          >\r\n            <div\r\n              className={\r\n                isVisualizerFinished\r\n                  ? \"play-stop-symbol\"\r\n                  : \"play-stop-symbol stop\"\r\n              }\r\n            ></div>\r\n          </div>\r\n          <div\r\n            className=\"btn negative-neon-btn\"\r\n            onClick={() => this.handleClearWall()}\r\n          >\r\n            Clear Wall\r\n          </div>\r\n          <div\r\n            className={\r\n              isInformationOpen ? \"information-btn open\" : \"information-btn\"\r\n            }\r\n            onClick={() => toggleIsInformationIsOpen()}\r\n          >\r\n            <div className=\"information-btn-line\"></div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFindingVisualizer;\r\n","import React from \"react\";\r\nimport { ASTAR, DIJKSTRA } from \"../variables/variable\";\r\n\r\nexport default function NavBar(props) {\r\n  const {\r\n    setisVisualizerFinished,\r\n    setSimulationSpeedValue,\r\n    setIsSetFinishToTrue,\r\n    setIsSetStartToTrue,\r\n    simulationSpeedValue,\r\n    setPathfindingAlgorithm,\r\n    pathfindingAlgorithm,\r\n    resetGridExceptStartPointFinishPointAndWall,\r\n    resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall,\r\n    cancelAnimation,\r\n  } = props;\r\n\r\n  const handleChangeSelect = (e) => {\r\n    cancelAnimation();\r\n    resetGridExceptStartPointFinishPointAndWall();\r\n    resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall();\r\n    setisVisualizerFinished(true);\r\n    setPathfindingAlgorithm(e.target.value);\r\n  };\r\n\r\n  const handleInputRangeChange = (e) => {\r\n    resetGridToInitExceptStartFinishPointAndWall();\r\n    setSimulationSpeedValue(e.target.value);\r\n  };\r\n\r\n  const handleClickSetStartPoint = () => {\r\n    resetGridToInitExceptStartFinishPointAndWall();\r\n    setIsSetStartToTrue();\r\n  };\r\n\r\n  const handleClickSetFinishPoint = () => {\r\n    resetGridToInitExceptStartFinishPointAndWall();\r\n    setIsSetFinishToTrue();\r\n  };\r\n\r\n  const resetGridToInitExceptStartFinishPointAndWall = () => {\r\n    cancelAnimation();\r\n    resetGridExceptStartPointFinishPointAndWall();\r\n    resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall();\r\n    setisVisualizerFinished(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"title-wrapper\">\r\n        <h1 className=\"title\">\r\n          Pathfinding\r\n          <br />\r\n          Visualizer\r\n        </h1>\r\n      </div>\r\n      <div className=\"settings\">\r\n        <div className=\"navbar-item algorithm\">\r\n          <h4 className=\"secondary-title\">Pathfinding Algorithm</h4>\r\n          <div className=\"pathfinding-algorithm-selector-wrapper\">\r\n            <select\r\n              className=\"pathfinding-algorithm-selector\"\r\n              value={pathfindingAlgorithm}\r\n              onChange={handleChangeSelect}\r\n            >\r\n              <option value={ASTAR}>A*</option>\r\n              <option value={DIJKSTRA}>Djikstra</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"navbar-item set-start-point\">\r\n          <h4 className=\"secondary-title\">Set Start Point</h4>\r\n          <button\r\n            className=\"node-information start-node-btn\"\r\n            onClick={() => handleClickSetStartPoint()}\r\n          ></button>\r\n        </div>\r\n        <div className=\"navbar-item set-finish-point\">\r\n          <h4 className=\"secondary-title\">Set Finish Point</h4>\r\n          <button\r\n            className=\"node-information finish-node-btn\"\r\n            onClick={() => handleClickSetFinishPoint()}\r\n          ></button>\r\n        </div>\r\n        <div className=\"navbar-item set-simulation-speed\">\r\n          <h4 className=\"secondary-title\">Simulation Speed</h4>\r\n\r\n          <div className=\"pathfinding-algorithm-selector-wrapper\">\r\n            <select\r\n              className=\"pathfinding-algorithm-selector\"\r\n              value={simulationSpeedValue}\r\n              onChange={handleInputRangeChange}\r\n            >\r\n              <option value={35}>Slow</option>\r\n              <option value={60}>Medium</option>\r\n              <option value={85}>Fast</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst Information = (props) => {\r\n  const { isInformationOpen } = props;\r\n  return (\r\n    <>\r\n      <div className={isInformationOpen ? \"information open\" : \"information\"}>\r\n        <h1 className=\"title\">Information</h1>\r\n        <div className=\"information-items\">\r\n          <div className=\"information-item information-item-1\">\r\n            <h4 className=\"secondary-title\">Start Node</h4>\r\n            <div className=\"node-information start-node\"></div>\r\n          </div>\r\n          <div className=\"information-item information-item-2\">\r\n            <h4 className=\"secondary-title\">Finish Node</h4>\r\n            <div className=\"node-information finish-node\"></div>\r\n          </div>\r\n          <div className=\"information-item information-item-3\">\r\n            <h4 className=\"secondary-title\">Wall Node</h4>\r\n            <div className=\"node-information wall-node\"></div>\r\n          </div>\r\n          <div className=\"information-item information-item-4\">\r\n            <h4 className=\"secondary-title\">Visited Node</h4>\r\n            <div className=\"node-information visited-node\"></div>\r\n          </div>\r\n          <div className=\"information-item information-item-5\">\r\n            <h4 className=\"secondary-title\">Shortest Path</h4>\r\n            <div className=\"node-information shortest-path\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Information;\r\n","import React, { useState, useEffect } from \"react\";\nimport PathFindingVisualizer from \"./components/PathFindingVisualizer\";\nimport NavBar from \"./components/NavBar\";\nimport { GRID_COL_LENGTH, GRID_ROW_LENGTH, ASTAR } from \"./variables/variable\";\nimport \"./style/index.css\";\nimport Information from \"./components/Information\";\n\nfunction App() {\n  const [isSetStartPoint, setIsSetStartPoint] = useState(false);\n  const [isSetFinishPoint, setIsSetFinishPoint] = useState(false);\n  const [isVisualizerFinished, setisVisualizerFinished] = useState(true);\n  const [simulationSpeedValue, setSimulationSpeedValue] = useState(1);\n  const [grid, setGrid] = useState([]);\n  const [animationTimeOutArr, setAnimationTimeOutArr] = useState([]);\n  const [pathfindingAlgorithm, setPathfindingAlgorithm] = useState(ASTAR);\n  const [isInformationOpen, setIsInformationOpen] = useState(false);\n\n  const getReferenceToAllNode = () => {\n    const gridRef = [];\n    for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n      const currRow = [];\n      for (let j = 0; j < GRID_COL_LENGTH; j++) {\n        currRow.push(React.createRef());\n      }\n      gridRef.push(currRow);\n    }\n    return gridRef;\n  };\n  const [gridRef, setGridRef] = useState(getReferenceToAllNode());\n\n  useEffect(() => {\n    const newGrid = getInitializeGrid();\n\n    setGrid(newGrid);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getInitializeGrid = () => {\n    const grid = [];\n    for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n      const currRow = [];\n      for (let j = 0; j < GRID_COL_LENGTH; j++) {\n        currRow.push(createNode(i, j));\n      }\n      grid.push(currRow);\n    }\n\n    return grid;\n  };\n\n  const createNode = (row, col) => {\n    return {\n      col,\n      row,\n      isStart: false,\n      isFinish: false,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      f: 0,\n      h: 0,\n      g: 0,\n      neighbors: [],\n    };\n  };\n\n  const resetGridExceptStartPointFinishPointAndWall = () => {\n    let newGrid = grid.slice();\n    for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n      for (let j = 0; j < GRID_COL_LENGTH; j++) {\n        let node = newGrid[i][j];\n        if (node.isWall || node.isStart || node.isFinish) {\n          newGrid[i][j].isVisited = false;\n          newGrid[i][j].previousNode = null;\n          newGrid[i][j].distance = Infinity;\n          newGrid[i][j].neighbors = [];\n          continue;\n        }\n        newGrid[i][j] = createNode(i, j);\n      }\n    }\n    setGrid(newGrid);\n  };\n\n  const resetGridExceptStartPointAndFinishPoint = () => {\n    let newGrid = grid.slice();\n    for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n      for (let j = 0; j < GRID_COL_LENGTH; j++) {\n        let node = newGrid[i][j];\n        if (node.isStart || node.isFinish) {\n          newGrid[i][j].isVisited = false;\n          newGrid[i][j].previousNode = null;\n          newGrid[i][j].distance = Infinity;\n          newGrid[i][j].isWall = false;\n          newGrid[i][j].neighbors = [];\n          continue;\n        }\n        newGrid[i][j] = createNode(i, j);\n      }\n    }\n    setGrid(newGrid);\n  };\n\n  const resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall = () => {\n    for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n      for (let j = 0; j < GRID_COL_LENGTH; j++) {\n        const node = grid[i][j];\n        if (node.isWall || node.isStart || node.isFinish) continue;\n        gridRef[i][j].current.className = \"node-btn \";\n      }\n    }\n  };\n\n  const resetAllNodeClassNameIntoDefaultExceptStartPointFinishPoint = () => {\n    for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n      for (let j = 0; j < GRID_COL_LENGTH; j++) {\n        const node = grid[i][j];\n        if (node.isStart || node.isFinish) continue;\n        gridRef[i][j].current.className = \"node-btn \";\n      }\n    }\n  };\n\n  const resetAllNodeClassNameIntoDefault = () => {\n    for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n      for (let j = 0; j < GRID_COL_LENGTH; j++) {\n        gridRef[i][j].current.className = \"node-btn \";\n      }\n    }\n  };\n\n  const setIsSetStartToTrue = () => {\n    setIsSetStartPoint(true);\n    setIsSetFinishPoint(false);\n  };\n\n  const setIsSetStartToFalse = () => {\n    setIsSetStartPoint(false);\n  };\n\n  const setIsSetFinishToTrue = () => {\n    setIsSetFinishPoint(true);\n    setIsSetStartPoint(false);\n  };\n\n  const setIsSetFinishToFalse = () => {\n    setIsSetFinishPoint(false);\n  };\n\n  const animateDjikstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    let promise, timeOut;\n    let arrTimeOut = [];\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        promise = new Promise((resolve) => {\n          timeOut = setTimeout(async () => {\n            const message = await animateShortestPath(nodesInShortestPathOrder);\n            resolve(message);\n          }, (100 - simulationSpeedValue) * i);\n          arrTimeOut.push(timeOut);\n          setAnimationTimeOutArr(arrTimeOut);\n        });\n\n        return promise;\n      }\n      if (visitedNodesInOrder[i].isStart || visitedNodesInOrder[i].isFinish)\n        continue;\n      timeOut = setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        gridRef[node.row][node.col].current.className = \"node-btn visited-node\";\n      }, (100 - simulationSpeedValue) * i);\n      arrTimeOut.push(timeOut);\n    }\n  };\n\n  const animateShortestPath = (nodesInShortesPathOrder) => {\n    let promise, timeOut;\n    let arrTimeOut = [...animationTimeOutArr];\n\n    for (let i = 1; i < nodesInShortesPathOrder.length - 1; i++) {\n      promise = new Promise((resolve) => {\n        timeOut = setTimeout(() => {\n          const node = nodesInShortesPathOrder[i];\n          gridRef[node.row][node.col].current.className =\n            \"node-btn shortest-path\";\n          resolve(\"visualizer is done\");\n        }, 50 * i);\n        arrTimeOut.push(timeOut);\n      });\n    }\n\n    setAnimationTimeOutArr(arrTimeOut);\n    return promise;\n  };\n\n  const cancelAnimation = () => {\n    let animations = animationTimeOutArr.slice();\n    animations.map((animation) => {\n      clearTimeout(animation);\n    });\n    resetAnimationTimeOutArr();\n  };\n\n  const resetAnimationTimeOutArr = () => setAnimationTimeOutArr([]);\n\n  const toggleIsInformationIsOpen = () => {\n    if (isInformationOpen) {\n      setIsInformationOpen(false);\n    } else {\n      setIsInformationOpen(true);\n    }\n  };\n\n  return (\n    <>\n      <NavBar\n        simulationSpeedValue={simulationSpeedValue}\n        setSimulationSpeedValue={(value) => setSimulationSpeedValue(value)}\n        setIsSetStartToTrue={setIsSetStartToTrue}\n        setIsSetFinishToTrue={setIsSetFinishToTrue}\n        setisVisualizerFinished={(value) => setisVisualizerFinished(value)}\n        pathfindingAlgorithm={pathfindingAlgorithm}\n        setPathfindingAlgorithm={(value) => setPathfindingAlgorithm(value)}\n        resetGridExceptStartPointFinishPointAndWall={\n          resetGridExceptStartPointFinishPointAndWall\n        }\n        resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall={\n          resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall\n        }\n        cancelAnimation={cancelAnimation}\n      />\n      <PathFindingVisualizer\n        GRID_COL_LENGTH={GRID_COL_LENGTH}\n        GRID_ROW_LENGTH={GRID_ROW_LENGTH}\n        grid={grid}\n        gridRef={gridRef}\n        setGrid={(value) => setGrid(value)}\n        getInitializeGrid={getInitializeGrid}\n        simulationSpeedValue={simulationSpeedValue}\n        isSetStartPoint={isSetStartPoint}\n        isSetFinishPoint={isSetFinishPoint}\n        isVisualizerFinished={isVisualizerFinished}\n        pathfindingAlgorithm={pathfindingAlgorithm}\n        setIsSetStartToFalse={setIsSetStartToFalse}\n        setIsSetFinishToFalse={setIsSetFinishToFalse}\n        setisVisualizerFinished={(value) => setisVisualizerFinished(value)}\n        resetGridExceptStartPointFinishPointAndWall={\n          resetGridExceptStartPointFinishPointAndWall\n        }\n        resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall={\n          resetAllNodeClassNameIntoDefaultExceptStartPointFinishPointAndWall\n        }\n        animateDjikstra={(visitedNodesInOrder, nodesInShortestPathOrder) =>\n          animateDjikstra(visitedNodesInOrder, nodesInShortestPathOrder)\n        }\n        cancelAnimation={cancelAnimation}\n        resetGridExceptStartPointAndFinishPoint={\n          resetGridExceptStartPointAndFinishPoint\n        }\n        resetAllNodeClassNameIntoDefault={resetAllNodeClassNameIntoDefault}\n        resetAllNodeClassNameIntoDefaultExceptStartPointFinishPoint={\n          resetAllNodeClassNameIntoDefaultExceptStartPointFinishPoint\n        }\n        toggleIsInformationIsOpen={toggleIsInformationIsOpen}\n        isInformationOpen={isInformationOpen}\n      />\n      <Information isInformationOpen={isInformationOpen}></Information>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}